<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:bop2="http://www.fanuc.co.jp/develop/mmc/bop2">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>cnc_rdparar</title>
   </head>
   <body bgcolor="#FFFFFF"><FONT face="Verdana,Arial,Helvetica,sans-serif"><a name="Function Name"></a><p class="ftitle">cnc_rdparar</p>
         <div class="text"><a name="Declaration"></a><p class="label">Declaration</p>
            <div class="mth">#include "fwlib32.h" or "fwlib64.h"
               <p></p>
               <prottype>FWLIBAPI short WINAPI cnc_rdparar(unsigned short FlibHndl, short *s_number, short
                  axis, short *e_number, short *length, void *param);</prottype>
            </div><a name="Description"></a><p class="label">Description</p>
            <cmn>
               
               <p>Reads the parameter specified by "*s_number","*e_number","axis"(only for the parameter
                  with axis). The data format depends on each parameter. The format of Byte/Word/2-Word
                  parameter is generally signed binary.</p>
               
               
               <p>Reads the parameter for all axes specified range by specifying 'ALL_AXES' in 'axis'.</p>
               
               
               <p>The attribute of CNC parameter depends on the type and axis, and it is
                  different for each parameter.  It is as follows, and can be got by
                  <a href="../ncdata/cnc_rdparainfo.xml" target="_parent">cnc_rdparainfo</a> function.</p>
               
               
               <table class="dd" border="1">
                  
                  <colgroup valign="top"></colgroup>
                  
                  <colgroup valign="top"></colgroup>
                  
                  <colgroup valign="top"></colgroup>
                  
                  <tr>
                     
                     <th>Parameter type</th>
                     
                     <th>Meaning</th>
                     
                     <th>Byte size</th>
                     </tr>
                  
                  <tr>
                     
                     <td>Bit parameter</td>
                     
                     <td>Every bits have each definition.</td>
                     
                     <td>1</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Bit parameter with axis</td>
                     
                     <td>Every bits have each definition. (each axis)</td>
                     
                     <td>1</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Byte parameter</td>
                     
                     <td>1-byte data is stored.</td>
                     
                     <td>1</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Byte parameter with axis</td>
                     
                     <td>1-byte data is stored. (each axis)</td>
                     
                     <td>1</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Word parameter</td>
                     
                     <td>2-byte data is stored.</td>
                     
                     <td>2</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Word parameter with axis</td>
                     
                     <td>2-byte data is stored. (each axis)</td>
                     
                     <td>2</td>
                     </tr>
                  
                  <tr>
                     
                     <td>2-Word parameter</td>
                     
                     <td>4-byte data is stored.</td>
                     
                     <td>4</td>
                     </tr>
                  
                  <tr>
                     
                     <td>2-Word parameter with axis</td>
                     
                     <td>4-byte data is stored. (each axis)</td>
                     
                     <td>4</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Real parameter<span class="xis"><br>(Series 15i, 30i, 0i-D/F, PMi-A)</span></td>
                     
                     <td>4-byte data which indicates value of variable and 4-byte data which indicates number
                        of places of decimals are stored.</td>
                     
                     <td>8</td>
                     </tr>
                  
                  <tr>
                     
                     <td>Real parameter with axis<span class="xis"><br>(Series 15i, 30i, 0i-D/F, PMi-A)</span></td>
                     
                     <td>4-byte data which indicates value of variable and 4-byte data which indicates number
                        of places of decimals are stored. (each axis)</td>
                     
                     <td>8</td>
                     </tr>
                  </table>
               
               
               <p>It is impossible to read any bit parameter bit by bit. 8 bits(i.e. 1 byte) which belong
                  to the same parameter number are read at the same time.</p>
               
               
               <p>See the "PARAMETER MANUAL" of CNC for details of each parameter.</p>
               
               </cmn><a name="Arguments"></a><p class="label">Arguments</p>
            <div class="dtarg">
               <name>FlibHndl</name>
               &nbsp;&nbsp;[&nbsp;
               <type>in</type>&nbsp;]
               </div>
            <div class="ddarg">
               <content>
                  
                  <p>
                     Specify the library handle. See "<a href="handle.htm" target="_parent">Library handle</a>" for details.
                     </p>
                  </content>
            </div>
            <div class="dtarg">
               <name>s_number</name>
               &nbsp;&nbsp;[&nbsp;
               <type>in/out</type>&nbsp;]
               </div>
            <div class="ddarg">
               <content>
                  
                  <p>Specify the start parameter number.<br>The parameter number which was read first actually is returned.</p>
                  
                  
                  <p>See the "PARAMETER MANUAL" of CNC about available parameter number.  It can be got
                     by <a href="../ncdata/cnc_rdparanum.xml" target="_parent">cnc_rdparanum</a> function and <a href="../ncdata/cnc_rdparainfo.xml" target="_parent">cnc_rdparainfo</a> function.
                     </p>
                  </content>
            </div>
            <div class="dtarg">
               <name>e_number</name>
               &nbsp;&nbsp;[&nbsp;
               <type>in/out</type>&nbsp;]
               </div>
            <div class="ddarg">
               <content>
                  
                  <p>Specify the end parameter number.<br>The parameter number which was read last actually is returned.</p>
                  
                  
                  <p>The new parameter may be added according to updating CNC
                     software, addition of the new function, etc.  If the new
                     parameter is added within reading range, the error(Return:
                     EW_LENGTH) may be returned or the application program may not
                     work correctly.  In order to avoid these problems, specify only
                     the continuous numbers of existing parameters as the reading
                     range.</p>
                  </content>
            </div>
            <div class="dtarg">
               <name>axis</name>
               &nbsp;&nbsp;[&nbsp;
               <type>in</type>&nbsp;]
               </div>
            <div class="ddarg">
               <content>
                  
                  <p>Specify the axis number.</p>
                  
                  <table class="dd">
                     
                     <colgroup align="left" valign="top">
                        
                        <tr>
                           
                           <td>0</td>
                           
                           <td>:</td>
                           
                           <td>assigns no axis</td>
                           </tr>
                        
                        <tr>
                           
                           <td>1,..,m</td>
                           
                           <td>:</td>
                           
                           <td>assigns 1 axis(m=max. controlled axes)</td>
                           </tr>
                        
                        <tr>
                           
                           <td>ALL_AXES</td>
                           
                           <td>:</td>
                           
                           <td>assigns all axes(ALL_AXES=-1)</td>
                           </tr>
                        </colgroup>
                     </table>
                  
                  <p>None axis type parameter can be read even if any value is
                     specified in "axis".  In case that an axis type parameter
                     exists in the specified range, the error(Return:EW_ATTRIB) is
                     returned by specifying "axis=0".</p>
                  </content>
            </div>
            <div class="dtarg">
               <name>length</name>
               &nbsp;&nbsp;[&nbsp;
               <type>in/out</type>&nbsp;]
               </div>
            <div class="ddarg">
               <content>
                  
                  <p>Specify the data block length which is enough to store the
                     specified parameter.</p>
                  
                  <p>The structure per 1 parameter is as follows, and each parameter is lined up in order
                     of number.</p>
                  
                  
                  <p class="dd">[= 4+(byte size of each parameter)*(number of axis)]</p>
                  
                  
                  <p>Because the size which was read actually is returned, it is
                     possible to specify the length more than the actual size.</p>
                  
                  
                  <p>In case that the size of parameter is 2 byte, the IODBPSD
                     structure is as follows.
                     In case that the size of parameter is 1 or 2 byte and the
                     length per 1 parameter is not a multiple of 4, 'dummy' is
                     necessary at the end of structure.  In case that its size is 4
                     or 8 byte, the size of data part per 1 parameter or 1 axis is 4
                     or 8 byte, and so 'dummy' is not necessary.</p>
                  
                  <p><b>IODBPSD</b></p>
                  
                  <table>
                     
                     <colgroup align="left" valign="top">
                        
                        <colgroup align="left" valign="top">
                           
                           <colgroup align="left" valign="top">
                              
                              <tr>
                                 
                                 <th>no axis/1 axis</th>
                                 
                                 <th>all axes</th>
                                 </tr>
                              
                              <tr>
                                 
                                 <td valign="top"><img src="ncdata/nprm.gif"></td>
                                 
                                 <td valign="top"><img src="ncdata/nprma.gif"></td>
                                 </tr>
                              </colgroup>
                           </colgroup>
                        </colgroup>
                     </table>
                  
                  <ul>
                     
                     <p>
                        n = Maximum controlled axes
                        </p>
                     </ul>
                  
                  
                  <p class="info">
                     In case of Series 15i, 16/18/21, 16i/18i/21i, 0i, 30i, Power Mate i and PMi-A, the
                     spindle parameters have an axis attribute, and the data for
                     number of spindle are valid.</p>
                  </content>
            </div>
            <div class="dtarg">
               <name>param</name>
               &nbsp;&nbsp;[&nbsp;
               <type>out</type>&nbsp;]
               </div>
            <div class="ddarg">
               <content>
                  
                  <p>Pointer to the area to store the parameters.<br>Each parameter can be referred by using the IODBPSD structure.</p>
                  
                  <pre>
Series 15, 16/18/21, 16i/18i/21i, 0i-A/B and Power Mate i

typedef struct  iodbpsd {
   short datano;              /* parameter number */
   short type;                /* upper byte:type */
                              /* lower byte:axis */
   union {
      char  cdata;            /* bit/byte parameter */
      short idata;            /* word parameter */
      long  ldata;            /* 2-word parameter */
      char  cdatas[MAX_AXIS]; /* bit/byte parameter with axis*/
      short idatas[MAX_AXIS]; /* word parameter with axis */
      long  ldatas[MAX_AXIS]; /* 2-word parameter with axis */
   } u ;
} IODBPSD ;               /* MAX_AXIS : max. controlled axes */
</pre>
                  
                  <pre>
Series 15i, 30i, 0i-D/F, PMi-A and Ethernet connection

typedef struct realprm {     /* real parameter */
   long prm_val;             /* value of variable */
   long dec_val;             /* number of places of decimals */
} REALPRM;

typedef struct  iodbpsd {
   short datano;               /* parameter number */
   short type;                 /* upper byte:type */
                               /* lower byte:axis */
   union {
      char    cdata;           /* bit/byte parameter */
      short   idata;           /* word parameter */
      long    ldata;           /* 2-word parameter */
      REALPRM rdata;           /* real parameter */
      char    cdatas[MAX_AXIS];/*bit/byte parameter with axis*/
      short   idatas[MAX_AXIS];/* word parameter with axis */
      long    ldatas[MAX_AXIS];/* 2-word parameter with axis */
      REALPRM rdatas[MAX_AXIS];/* real parameter with axis */
   } u;
} IODBPSD ;               /* MAX_AXIS : max. controlled axes */
</pre>
                  
                  
                  <dl>
                     
                     <dt>datano</dt>
                     
                     <dd>Parameter number which was read is stored.</dd>
                     
                     <dt>type</dt>
                     
                     <dd>Attribute of parameter which was read is stored.</dd>
                     
                     <dd>Upper byte:type
                        
                        <table class="dd">
                           
                           <tr>
                              
                              <td>0</td>
                              
                              <td>:</td>
                              
                              <td>bit type</td>
                              </tr>
                           
                           <tr>
                              
                              <td>1</td>
                              
                              <td>:</td>
                              
                              <td>byte type</td>
                              </tr>
                           
                           <tr>
                              
                              <td>2</td>
                              
                              <td>:</td>
                              
                              <td>word type</td>
                              </tr>
                           
                           <tr>
                              
                              <td>3</td>
                              
                              <td>:</td>
                              
                              <td>2-word type</td>
                              </tr>
                           
                           <tr>
                              
                              <td>4</td>
                              
                              <td>:</td>
                              
                              <td>real type (Series 15i, 30i, 0i-D/F, PMi-A)</td>
                              </tr>
                           </table>
                        </dd>
                     
                     <dd>Lower byte:axis
                        
                        <table class="dd">
                           
                           <tr>
                              
                              <td>0</td>
                              
                              <td>:</td>
                              
                              <td>no axis</td>
                              </tr>
                           
                           <tr>
                              
                              <td>1,..,m</td>
                              
                              <td>:</td>
                              
                              <td>1 axis(m=max. controlled axes)</td>
                              </tr>
                           
                           <tr>
                              
                              <td>ALL_AXES</td>
                              
                              <td>:</td>
                              
                              <td>all axes(ALL_AXES=-1)</td>
                              </tr>
                           </table>
                        </dd>
                     
                     <dt>rdata, rdatas ( Series 15i, 30i, 0i-D/F, PMi-A )</dt>
                     
                     <dd>Real parameter is stored.<br>The value of variable is stored in prm_val, and the number of places of decimals is
                        stored in dec_val. </dd>
                     
                     <dd>
                        
                        <div class="dd">
                           
                           <p>Real parameter = prm_val * 10 ** (-dec_val)</p>
                           
                           <p>(Example) When the value of real parameter is 12.345, prm_val and dec_val are read
                              as follows.</p>
                           
                           <p class="dd">prm_val = 12345<br>dec_val = 3</p>
                           </div>
                        </dd>
                     </dl>
                  
                  </content>
            </div><a name="Return"></a><p class="label">Return</p>
            <p>EW_OK is returned on successful completion, otherwise any value except EW_OK is returned.</p>
            <p>The major error codes are as follows.</p>
            <table border="1">
               <colgroup align="center" valign="top"></colgroup>
               <colgroup align="left" valign="top"></colgroup>
               <colgroup align="left" valign="top"></colgroup>
               <tr>
                  <th>Return code</th>
                  <th>Meaning/Error handling</th>
               </tr>
               <tr>
                  <td>
                     <name>EW_LENGTH</name><br>(2)</td>
                  <td>
                     <content>Data block length error<br>Size of area to store parameter(length) is wrong.</content>
                  </td>
               </tr>
               <tr>
                  <td>
                     <name>EW_NUMBER</name><br>(3)</td>
                  <td>
                     <content>Data number error<br>Parameter number(s_number,e_number) is wrong.</content>
                  </td>
               </tr>
               <tr>
                  <td>
                     <name>EW_ATTRIB</name><br>(4)</td>
                  <td>
                     <content>Data attribute error<br>Axis number(axis) is wrong.</content>
                  </td>
               </tr>
               <tr>
                  <td>
                     <name>EW_PASSWD</name><br>(17)</td>
                  <td>
                     <content>The parameter of specified range cannot be read because the data is protected. <br>( Series 16i/18i/21i, 0i-A/B/C )</content>
                  </td>
               </tr>
            </table>
            <p></p>
            <p>
               As for the other return codes or the details, see 
               
               "<a href="errcode.htm" target="_parent">Return status of Data window function</a>"
               </p><a name="CNC option"></a><p class="label">CNC option</p>
            <p></p>
            <p>For HSSB connection,</p>
            <ul>
               <p>
                  <hssb>The extended driver/library function is necessary.</hssb>
               </p>
            </ul>
            <p>For Ethernet connection,</p>
            <ul>
               <p>
                  <ethr>
                     <p>The Ethernet function and the extended driver/library function are necessary.</p>
                     
                     <p>However, in case of Series 16i/18i/21i-B, 0i-B/C/D/F, Series 30i and PMi-A, the required
                        CNC option is as follows.</p>
                     
                     <p>When Embedded Ethernet is used,</p>
                     
                     <p>
                        <ul>above two optional functions are not required.</ul>
                     </p>
                     
                     <p>When Ethernet board is used,</p>
                     
                     <p>
                        <ul>only Ethernet function is required.</ul>
                     </p>
                     </ethr>
               </p>
            </ul>
            <p></p><a name="CNC parameter"></a><p class="label">CNC parameter</p>
            <p>This function is not related to CNC parameter.</p><a name="CNC mode"></a><p class="label">CNC mode</p>
            <p>This function can be used in any CNC mode.</p><a name="Available CNC"></a><p class="label">Available CNC</p>
            <table border="1">
               <colgroup width="100em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <tr>
                  <th></th>
                  <th>0i-A</th>
                  <th>0i-B/C(Note)</th>
                  <th>0i-D</th>
                  <th>0i-F</th>
                  <th>15</th>
                  <th>15i</th>
                  <th>16</th>
                  <th>18</th>
                  <th>21</th>
                  <th>16i-A</th>
                  <th>18i-A</th>
                  <th>21i-A</th>
                  <th>16i-B</th>
                  <th>18i-B</th>
                  <th>21i-B</th>
                  <th>30i-A</th>
                  <th>30i-B</th>
               </tr>
               <tr>
                  <td>M (Machining)</td>
                  <td class="support">
                     <fs0ia>H</fs0ia>
                  </td>
                  <td class="support">
                     <fs0ib>O</fs0ib>
                  </td>
                  <td class="support">
                     <fs0id>O</fs0id>
                  </td>
                  <td class="support">
                     <fs0if>O</fs0if>
                  </td>
                  <td class="support">
                     <fs15>H</fs15>
                  </td>
                  <td class="support">
                     <fs15i>O</fs15i>
                  </td>
                  <td class="support">
                     <fs16>H</fs16>
                  </td>
                  <td class="support">
                     <fs18>H</fs18>
                  </td>
                  <td class="support">
                     <fs21>H</fs21>
                  </td>
                  <td class="support">
                     <fs16ia>O</fs16ia>
                  </td>
                  <td class="support">
                     <fs18ia>O</fs18ia>
                  </td>
                  <td class="support">
                     <fs21ia>O</fs21ia>
                  </td>
                  <td class="support">
                     <fs16ib>O</fs16ib>
                  </td>
                  <td class="support">
                     <fs18ib>O</fs18ib>
                  </td>
                  <td class="support">
                     <fs21ib>O</fs21ib>
                  </td>
                  <td class="support">
                     <fs30ia>O</fs30ia>
                  </td>
                  <td class="support">
                     <fs30ib>O</fs30ib>
                  </td>
               </tr>
               <tr>
                  <td>T (Turning)  </td>
                  <td class="support">
                     <fs0ia>H</fs0ia>
                  </td>
                  <td class="support">
                     <fs0ib>O</fs0ib>
                  </td>
                  <td class="support">
                     <fs0id>O</fs0id>
                  </td>
                  <td class="support">
                     <fs0if>O</fs0if>
                  </td>
                  <td class="support">
                     <fs15>H</fs15>
                  </td>
                  <td>
                     -
                     </td>
                  <td class="support">
                     <fs16>H</fs16>
                  </td>
                  <td class="support">
                     <fs18>H</fs18>
                  </td>
                  <td class="support">
                     <fs21>H</fs21>
                  </td>
                  <td class="support">
                     <fs16ia>O</fs16ia>
                  </td>
                  <td class="support">
                     <fs18ia>O</fs18ia>
                  </td>
                  <td class="support">
                     <fs21ia>O</fs21ia>
                  </td>
                  <td class="support">
                     <fs16ib>O</fs16ib>
                  </td>
                  <td class="support">
                     <fs18ib>O</fs18ib>
                  </td>
                  <td class="support">
                     <fs21ib>O</fs21ib>
                  </td>
                  <td class="support">
                     <fs30ia>O</fs30ia>
                  </td>
                  <td class="support">
                     <fs30ib>O</fs30ib>
                  </td>
               </tr>
               <tr>
                  <td>LC (Loader)  </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td class="support">
                     <fs16>H</fs16>
                  </td>
                  <td class="support">
                     <fs18>H</fs18>
                  </td>
                  <td class="support">
                     <fs21>H</fs21>
                  </td>
                  <td class="support">
                     <fs16ia>H</fs16ia>
                  </td>
                  <td class="support">
                     <fs18ia>H</fs18ia>
                  </td>
                  <td class="support">
                     <fs21ia>H</fs21ia>
                  </td>
                  <td class="support">
                     <fs16ib>H</fs16ib>
                  </td>
                  <td class="support">
                     <fs18ib>H</fs18ib>
                  </td>
                  <td class="support">
                     <fs21ib>H</fs21ib>
                  </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
               </tr>
            </table>
            <p></p>
            <table border="1">
               <colgroup width="100em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <colgroup align="center" width="40em"></colgroup>
               <tr>
                  <th></th>
                  <th>0i-D</th>
                  <th>0i-F</th>
                  <th>16i</th>
                  <th>18i</th>
                  <th>30i-A</th>
                  <th>30i-B</th>
               </tr>
               <tr>
                  <td>P (Punch press)</td>
                  <td class="support">
                     <fs0id>O</fs0id>
                  </td>
                  <td class="support">
                     <fs0if>O</fs0if>
                  </td>
                  <td class="support">
                     <fs16i>O</fs16i>
                  </td>
                  <td class="support">
                     <fs18i>O</fs18i>
                  </td>
                  <td>
                     -
                     </td>
                  <td class="support">
                     <fs30ib>O</fs30ib>
                  </td>
               </tr>
               <tr>
                  <td>L (Laser)      </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td class="support">
                     <fs16i>O</fs16i>
                  </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td class="support">
                     <fs30ib>O</fs30ib>
                  </td>
               </tr>
               <tr>
                  <td>W (Wire)       </td>
                  <td>
                     -
                     </td>
                  <td>
                     -
                     </td>
                  <td class="support">
                     <fs16i>O</fs16i>
                  </td>
                  <td class="support">
                     <fs18i>O</fs18i>
                  </td>
                  <td class="support">
                     <fs30ia>O</fs30ia>
                  </td>
                  <td class="support">
                     <fs30ib>O</fs30ib>
                  </td>
               </tr>
            </table>
            <p></p><br><table border="1">
               <colgroup width="100em"></colgroup>
               <colgroup align="center" width="86em"></colgroup>
               <colgroup align="center" width="86em"></colgroup>
               <tr>
                  <td>Power Mate i-D</td>
                  <td class="support">
                     <d>O</d>
                  </td>
               </tr>
               <tr>
                  <td>Power Mate i-H</td>
                  <td class="support">
                     <h>O</h>
                  </td>
               </tr>
               <tr>
                  <td>Power Motion i-A</td>
                  <td class="support"><a>O</a></td>
               </tr>
            </table>
            <p></p>
            <table class="dd">
               <tr>
                  <td></td>
                  <td>"O"</td>
                  <td>:</td>
                  <td>Both Ethernet and HSSB</td>
               </tr>
               <tr>
                  <td></td>
                  <td>"E"</td>
                  <td>:</td>
                  <td>Ethernet</td>
               </tr>
               <tr>
                  <td></td>
                  <td>"H"</td>
                  <td>:</td>
                  <td>HSSB</td>
               </tr>
               <tr>
                  <td></td>
                  <td>"X"</td>
                  <td>:</td>
                  <td>Cannot be used</td>
               </tr>
               <tr>
                  <td></td>
                  <td>"-"</td>
                  <td>:</td>
                  <td>None</td>
               </tr>
            </table>
            <p style="background-color:mistyrose;">Note) 0i-C does not support the HSSB function.</p>
            <p>
               <add><b></b></add>
            </p><a name="Reference"></a><p class="label">See Also</p>
            <p><a class="func" target="_parent" href="../ncdata/cnc_rdparam.xml">cnc_rdparam</a>&nbsp;&nbsp;
               <a class="func" target="_parent" href="../ncdata/cnc_wrparam.xml">cnc_wrparam</a>&nbsp;&nbsp;
               <a class="func" target="_parent" href="../ncdata/cnc_wrparas.xml">cnc_wrparas</a>&nbsp;&nbsp;
               <a class="func" target="_parent" href="../ncdata/cnc_rdparam_ext.xml">cnc_rdparam_ext</a>&nbsp;&nbsp;
               <a class="func" target="_parent" href="../ncdata/cnc_rdparainfo.xml">cnc_rdparainfo</a>&nbsp;&nbsp;
               <a class="func" target="_parent" href="../ncdata/cnc_rdparanum.xml">cnc_rdparanum</a>&nbsp;&nbsp;
               </p><a name="Example"></a><p class="label">Example(C Language)</p>
            <p></p>
            <pre>
The following program reads the parameter within the specified number range and axis, and displays them.( Series 16i/18i/21i, 0i-A/B/C )

#include "fwlib32.h"

/* start/end are start/end number to be read, axis is axis number. */
short example( short start, short end, short axis )
{
        ODBSYS info ;
        IODBPSD *param, *ptr ;
        short ret, idx1, idx2, axno, inc ;
        short length;
        cnc_sysinfo( h, &amp;info ) ;
        axno = atoi( info.axes ) ;
        length = sizeof(IODBPSD) * (end - start + 1); // In case of axis type parameters
        param = (IODBPSD *)calloc( 1, length ) ;
        ret = cnc_rdparar( h, &amp;start, axis, &amp;end, &amp;length, param ) ;
        ptr = param ;
        if ( !ret ) {
            for ( idx1 = start ; idx1 &lt;= end ; idx1++ ) {
                if ( ( idx1 != 0 ) &amp;&amp; ( ptr-&gt;datano == 0 ) ) break ;
                printf( "No.%05d ", ptr-&gt;datano ) ;
                switch ( ptr-&gt;type &gt;&gt; 8 ) {
                        case 0: printf( "BIT " ) ; break ;
                        case 1: printf( "BYTE" ) ; break ;
                        case 2: printf( "WORD" ) ; break ;
                        case 3: printf( "2WRD" ) ; break ;
                }

                switch ( ptr-&gt;type &amp; 0xff ) {
                    case 0xff :
                        for ( idx2 = 0 ; idx2 &lt; axno ; idx2++ ) {
                            printf( "  #%d:", idx2+1 ) ;
                            switch ( ptr-&gt;type &gt;&gt; 8 ) {
                                case 0:
                                    printf( "0x%02X",
                                      (unsigned char)(ptr-&gt;u.cdatas[idx2]) ) ;
                                    inc = 1 ; break ;
                                case 1:
                                    printf( "%d", ptr-&gt;u.cdatas[idx2] ) ;
                                    inc = 1 ; break ;
                                case 2:
                                    printf( "%d", ptr-&gt;u.idatas[idx2] ) ;
                                    inc = 2 ; break ;
                                case 3:
                                    printf( "%ld", ptr-&gt;u.ldatas[idx2] ) ;
                                    inc = 4 ; break ;
                            }
                        }
                        putchar( '\n' ) ;
                        ptr = (IODBPSD *)(((char *)ptr)+4+MAX_AXIS*inc) ;
                        /* MAX_AXIS = 8 */
                        break ;
                    default :
                        printf( "  #%d:", ptr-&gt;type &amp; 0xff ) ;
                    case 0 :
                        switch ( ptr-&gt;type &gt;&gt; 8 ) {
                            case 0:
                                printf( "  0x%02X\n", (unsigned char)(ptr-&gt;u.cdata) ) ;
                                inc = 1+3 ; break ;
                            case 1:
                                printf( "  %d\n", ptr-&gt;u.cdata ) ;
                                inc = 1+3 ; break ;
                            case 2:
                                printf( "  %d\n", ptr-&gt;u.idata ) ;
                                inc = 2+2 ; break ;
                            case 3:
                                printf( "  %ld\n", ptr-&gt;u.ldata ) ;
                                inc = 4 ; break ;
                        }
                        ptr = (IODBPSD *)(((char *)ptr)+4+inc) ;
                        break ;
                }
            }
        }
        else
                printf( "ERROR!(%d)\n", ret ) ;
        free( param ) ;
        return ( ret ) ;
}
</pre>
            <p class="label">Example(C#)</p>
            <pre>
The following program reads the parameter within the specified number range and axis, and displays them.( Series 16i/18i/21i, 0i-A/B/C )

class example
{
    /* start/end are start/end number to be read, axis is axis number. */
    public short sample(short start, short end, short axis)
    {
            Focas1.ODBSYS info = new Focas1.ODBSYS();
            Focas1.IODBPSD param = new Focas1.IODBPSD();
            short ret, idx1, idx2, axno, inc;
            short length;
            Focas1.cnc_sysinfo( h, info ) ;
            axno = short.Parse( new string(info.axes) );
            length = (short)(Marshal.SizeOf(param) * (end - start + 1)); // In case of axis type parameters  

            byte[] bytes = new byte[length];
            IntPtr ptrWork = Marshal.AllocCoTaskMem(Marshal.SizeOf(param));

            ret = Focas1.cnc_rdparar(h, ref start, axis, ref end, ref length, bytes);
            if (ret == Focas1.EW_OK)
            {
                inc = 0;
                int pos = 0;
                for (idx1 = start; idx1 &lt;= end; idx1++)
                {
                    Marshal.Copy(bytes, pos, ptrWork, Marshal.SizeOf(param));
                    Marshal.PtrToStructure(ptrWork, param);

                    if ((start != 0) &amp;&amp; (param.datano == 0)) break;
                    Console.Write("No.{0:d5} ", param.datano);
                    switch (param.type &gt;&gt; 8)
                    {
                            case 0: Console.Write("BIT "); break;
                            case 1: Console.Write("BYTE"); break;
                            case 2: Console.Write("WORD"); break;
                            case 3: Console.Write("2WRD"); break;
                    }

                    switch (param.type &amp; 0xff)
                    {
                        case 0xff:
                            for (idx2 = 0; idx2 &lt; axno; idx2++)
                            {
                                Console.Write("  #{0}:", idx2 + 1);
                                switch (param.type &gt;&gt; 8)
                                {
                                    case 0:
                                        Console.Write("0x{0:X2}", param.u.cdatas[idx2]);
                                        inc = 1; break;
                                    case 1:
                                        Console.Write("{0}", (sbyte)(param.u.cdatas[idx2]));
                                        inc = 1; break;
                                    case 2:
                                        Console.Write("{0}", param.u.idatas[idx2]);
                                        inc = 2; break;
                                    case 3:
                                        Console.Write("{0}", param.u.ldatas[idx2]);
                                        inc = 4; break;
                                }
                            }
                            Console.Write('\n');
                            pos += (short)(4 + Focas1.MAX_AXIS * inc);
                            /* MAX_AXIS = 8 */
                            break;
                        case 0:
                            switch (param.type &gt;&gt; 8)
                            {
                                case 0:
                                    Console.WriteLine("  0x{0:X2}", param.u.cdata);
                                    inc = 1 + 3; break;
                                case 1:
                                    Console.WriteLine("  {0}", (sbyte)(param.u.cdata));
                                    inc = 1 + 3; break;
                                case 2:
                                    Console.WriteLine("  {0}", param.u.idata);
                                    inc = 2 + 2; break;
                                case 3:
                                    Console.WriteLine("  {0}", param.u.ldata);
                                    inc = 4; break;
                            }
                            pos += (short)(4 + inc);
                            break;
                        default:
                            Console.Write("  #{0}:", param.type &amp; 0xff);
                            break;
                    }
                }
            }
            else
            {
                    Console.WriteLine("ERROR!({0})", ret);
            }
            Marshal.FreeCoTaskMem(ptrWork);
            return (ret);
    }
}</pre>
         </div></FONT><hr>
   </body>
</html>